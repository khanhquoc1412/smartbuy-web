const { StatusCodes } = require("http-status-codes");
const Category = require("../models/category");
const { NotFoundError } = require("../errors");

// üìå L·∫•y t·∫•t c·∫£ Category
const getAll = async (req, res) => {
  try {
    const categories = await Category.find();
    res.status(StatusCodes.OK).json({
      categories,
      total: categories.length,
    });
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// üìå L·∫•y 1 Category theo id
const getById = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await Category.findById(id);

    if (!category) throw new NotFoundError("Danh m·ª•c kh√¥ng t·ªìn t·∫°i");

    res.status(StatusCodes.OK).json(category);
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message,
    });
  }
};

// üìå T·∫°o Category
const create = async (req, res) => {
  try {
    const { name, nameAscii } = req.body;

    if (!name || !nameAscii) {
      return res.status(StatusCodes.BAD_REQUEST).json({
        message: "T√™n v√† nameAscii l√† b·∫Øt bu·ªôc",
      });
    }

    const category = await Category.create({ name, nameAscii });

    res.status(StatusCodes.CREATED).json({
      category,
      message: "T·∫°o danh m·ª•c th√†nh c√¥ng",
    });
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message || "Kh√¥ng th·ªÉ t·∫°o danh m·ª•c",
    });
  }
};

// üìå C·∫≠p nh·∫≠t Category
const update = async (req, res) => {
  try {
    const { id } = req.params;
    const { name, nameAscii } = req.body;

    const category = await Category.findByIdAndUpdate(
      id,
      { name, nameAscii },
      { new: true }
    );

    if (!category) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y danh m·ª•c");

    res.status(StatusCodes.OK).json({
      category,
      message: "C·∫≠p nh·∫≠t danh m·ª•c th√†nh c√¥ng",
    });
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message,
    });
  }
};

// üìå X√≥a Category
const remove = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await Category.findByIdAndDelete(id);

    if (!category) throw new NotFoundError("Kh√¥ng t√¨m th·∫•y danh m·ª•c");

    res.status(StatusCodes.OK).json({
      message: "X√≥a danh m·ª•c th√†nh c√¥ng",
    });
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message,
    });
  }
};

module.exports = {
  getAll,
  getById,
  create,
  update,
  remove,
};
