// controllers/productSpecification.controller.js
const { StatusCodes } = require("http-status-codes");
const ProductSpecification = require("../models/product_specification");
const Product = require("../models/product");
const Specification = require("../models/specification");
const { NotFoundError, BadRequestError } = require("../errors");

// üìå L·∫•y t·∫•t c·∫£ ProductSpecifications
const getAll = async (req, res) => {
  try {
    const specs = await ProductSpecification.find()
      .populate("productId", "name")
      .populate("specsId", "name");

    res.status(StatusCodes.OK).json({
      specs,
      total: specs.length,
    });
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: "L·ªói server",
      error: error.message,
    });
  }
};

// üìå L·∫•y theo productId
const getByProduct = async (req, res) => {
  try {
    const { productId } = req.params;
    const specs = await ProductSpecification.find({ productId }).populate(
      "specsId",
      "name"
    );

    if (!specs.length)
      throw new NotFoundError("Kh√¥ng t√¨m th·∫•y th√¥ng s·ªë s·∫£n ph·∫©m");

    res.status(StatusCodes.OK).json(specs);
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message,
    });
  }
};

// üìå T·∫°o m·ªõi ProductSpecification
const create = async (req, res) => {
  try {
    const { productId, specsId, specValue } = req.body;

    const product = await Product.findById(productId);
    if (!product) throw new NotFoundError("S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i");

    const spec = await Specification.findById(specsId);
    if (!spec) throw new NotFoundError("Th√¥ng s·ªë kh√¥ng t·ªìn t·∫°i");

    const newSpec = await ProductSpecification.create({
      productId,
      specsId,
      specValue,
    });

    res.status(StatusCodes.CREATED).json(newSpec);
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message || "Kh√¥ng th·ªÉ t·∫°o ProductSpecification",
    });
  }
};

// üìå C·∫≠p nh·∫≠t ProductSpecification
const update = async (req, res) => {
  try {
    const { id } = req.params;
    const { specValue } = req.body;

    const updated = await ProductSpecification.findByIdAndUpdate(
      id,
      { specValue },
      { new: true }
    );

    if (!updated)
      throw new NotFoundError("Kh√¥ng t√¨m th·∫•y ProductSpecification");

    res.status(StatusCodes.OK).json(updated);
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message,
    });
  }
};

// üìå X√≥a ProductSpecification
const remove = async (req, res) => {
  try {
    const { id } = req.params;
    const deleted = await ProductSpecification.findByIdAndDelete(id);

    if (!deleted)
      throw new NotFoundError("Kh√¥ng t√¨m th·∫•y ProductSpecification");

    res.status(StatusCodes.OK).json({
      message: "X√≥a th√†nh c√¥ng",
    });
  } catch (error) {
    console.error(error);
    res.status(StatusCodes.BAD_REQUEST).json({
      message: error.message,
    });
  }
};

module.exports = {
  getAll,
  getByProduct,
  create,
  update,
  remove,
};
